<?php
/* $Id: image_enhanced_scaling.module,v 1.9.2.2 2007/01/25 17:04:26 zoo33 Exp $ */

/**
 * @file
 * Provides enhanced scaling of images. Loosely based on image_exact.module and parts of image.module.
 * Developed by Hannes Lilljequist (zoo33 at drupal.org) with support by ETC bild (http://www.etcbild.se).
 */

/**
 * Implementation of hook_help().
 */
function image_enhanced_scaling_help($section) {
  switch ($section) {
    case 'admin/help#image_enhanced_scaling':
      $output = '<p>' . t("Image Enhanced Scaling replaces the image scaling function used by the image module with one that gives a better image quality. This is achieved by applying a sharpness filter to the image derivatives and converting them to a suitable color profile.") . '</p>';
      $output .= '<p>' . t("Note: this module requires that the Imagemagick framework provided by the image module is installed and properly configured. This involves moving the file <em>image.imagemagick.inc</em> from the image module's directory to the <em>includes</em> directory. See README.txt for more details.") . '</p>';
      $output .= t('<p>You can</p>
<ul>
<li>view image handling messages and choose image toolkit in <a href="!admin-settings">Administer &gt;&gt; Site configuration &gt;&gt; Image toolkit</a>.</li>
<li>configure the sharpening filter and the color profile conversion at <a href="!admin-settings-enhancedimagescaling">Administer &gt;&gt; Site configuration &gt;&gt; Image enhanced scaling</a>.</li>
</ul>
', array('!admin-settings' => url('admin/settings/image-toolkit'), '!admin-settings-enhancedimagescaling' => url('admin/settings/image-enhanced-scaling')));
      return $output;
  }
}

/**
 * Implementation of hook_menu().
 */
function image_enhanced_scaling_menu($may_cache) {
  if ($may_cache) {
    $items[] = array(
      'path' => 'admin/settings/image-enhanced-scaling',
      'title' => t('Image enhanced scaling'),
      'description' => t('Configure the image sharening filter and the color profile conversion.'),
      'callback' => 'drupal_get_form',
      'callback arguments' => 'image_enhanced_scaling_admin_settings',
      'access' => user_access('administer site configuration'),
      'type' => MENU_NORMAL_ITEM,
     );
  }
  return $items;
}

/**
 * Menu callback: module settings.
 */
function image_enhanced_scaling_admin_settings() {
  image_enhanced_scaling_check();
  $form['intro'] = array(
    '#value' => '<p>' . t("Image Enhanced Scaling replaces the image scaling function used by the image module with one that gives a better image quality. This is achieved by applying a sharpness filter to the image derivatives and converting them to a suitable color profile.") . '</p><p>' . t('Note: changing any of these settings will cause all image derivatives to be rebuilt next time they are accessed.') . '</p>',
  );
  $form['image_updated'] = array('#type' => 'hidden', '#value' => time());
  $form['general'] = array(
    '#type' => 'fieldset',
    '#collapsible' => true,
    '#title' => t('General'),
  );
  $form['general']['image_enhanced_scaling_enabled'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable enhanced scaling'),
    '#default_value' => variable_get('image_enhanced_scaling_enabled', 1),
    '#description' => t("You can disable the enhanced scaling functionality if you wish to have the module enabled but inactive, to keep it's scaling API available for other modules."),
  );
  $form['sparpening'] = array(
    '#type' => 'fieldset',
    '#collapsible' => true,
    '#title' => t('Sharpening filter'),
    '#description' => t('The sharpness filter is used to regain some of the sharpness that is always lost when a digital photograph is scaled down. This is equivalent to the commonly used "Unsharp Mask" filter. It is important that these values are not set too high as it can easily make the images look artificial.'),
  );
  $form['sparpening']['image_enhanced_scaling_sharp_amount'] = array(
    '#type' => 'textfield',
    '#title' => t('Sharpness filter strength'),
    '#default_value' => variable_get('image_enhanced_scaling_sharp_amount', 90),
    '#size' => 4,
    '#maxlength' => 3,
    '#description' => t('Apply this percentage of sharpness when scaling. 90 is recommended, although values higher than 100 are also valid.'),
  );
  $form['sparpening']['image_enhanced_scaling_sharp_radius'] = array(
    '#type' => 'textfield',
    '#title' => t('Sharpness filter radius'),
    '#default_value' => variable_get('image_enhanced_scaling_sharp_radius', 0.9),
    '#size' => 4,
    '#maxlength' => 4,
    '#description' => t('Use this pixel radius for the sharpness filter. 0.9 is recommended.'),
  );
  $form['profile'] = array(
    '#type' => 'fieldset',
    '#collapsible' => true,
    '#title' => t('Color profile'),
    '#description' => t('Scaled images may be converted to a color profile specified here. This is especially important when working with images that use a wide-gamut color profile such as ColorMatch or Adobe RGB, which is often the case with professional photography. sRGB (which may be downloaded from <a href="http://www.color.org/profiles.html">ICC</a>) is recommended since it is likely to look good on most displays.'),
  );
  $form['profile']['image_enhanced_scaling_profile'] = array(
    '#type' => 'textfield',
    '#title' => t('Path to color profile'),
    '#default_value' => variable_get('image_enhanced_scaling_profile', ''),
    '#description' => t('The path to a color profile file that all scaled down images will be converted to. Leave empty to disable.'),
  );
  return system_settings_form($form);
}


/*
 * Implementation of hook_nodeapi
 *
 * Catch image that are being saved (and outdated images that are being loaded) and create derivatives
 */
function image_enhanced_scaling_nodeapi(&$node, $op, $teaser = NULL, $page = NULL) {
  if ($node->type != 'image') return;
  if (!variable_get('image_enhanced_scaling_enabled', 1)) return;
  if ($op == 'submit' ||
      ($op == 'load' && !image_enhanced_scaling_check_derivatives($node))
  ) {
    if (!image_enhanced_scaling_check()) return;
    $source = file_create_path($node->images['_original']);
    $info = image_get_info($source);
    $sharp_amount = variable_get('image_enhanced_scaling_sharp_amount', 90);
    $sharp_radius = variable_get('image_enhanced_scaling_sharp_radius', 0.9);
    $profile = variable_get('image_enhanced_scaling_profile', '');
    $sizes = _image_get_sizes();
    foreach ($sizes as $size) {
      if ($size['label'] && $size['width'] && $size['height'] && 
        ($info['width'] > $size['width'] || $info['height'] > $size['height'])
      ) {
        if (empty($node->images[$size['label']])) {
          // This size is not yet created for this image. We have to create it to prevent image.module from doing it.
          $destination = image_enhanced_scaling_new_image_name($source);
          $destination = _image_filename(basename($destination), $size['label'], FALSE);
        }
        else {
          $destination = image_enhanced_scaling_new_image_name($node->images[$size['label']]);
        }
        if (image_enhanced_scaling_resize($source, file_create_path($destination), $size['width'], $size['height'], $sharp_amount, $sharp_radius, $profile)) {
          if (empty($node->images[$size['label']])) {
            if (!empty($node->nid)) {
              _image_insert($node, $size['label'], file_create_path($destination));
            }
            $node->images[$size['label']] = $destination;
          }
          elseif ($node->images[$size['label']] != $destination) {
            if (!empty($node->nid)) {
              db_query("UPDATE {files} SET filepath='%s' WHERE nid=%d AND filename='%s'", $destination, $node->nid, $size['label']);
            }
            file_delete(file_create_path($node->images[$size['label']]));
            $node->images[$size['label']] = $destination;
          }
        }
        else {
          drupal_set_message(t('Unable to create %label image', array('%label' => $size['label'])), 'error');
        }
      }
    }
  }
}


/**
 * Check to see if any of the image derivatives need to be rebuilt for a certain image node.
 *
 * @param $node
 *   The node object
 * @return $result
 *   true or false
 */
function image_enhanced_scaling_check_derivatives($node) {
  $sizes = _image_get_sizes();
  foreach ($sizes as $size) {
    if ($size['label'] == '_original') continue;
    if (empty($node->images[$size['label']]) ||
        !file_exists(file_create_path($node->images[$size['label']])) ||
        filemtime(file_create_path($node->images[$size['label']])) < variable_get('image_updated', 0)
    ) {
      return false;
    }
  }
  return true;
}


/**
 * Check the Drupal environment for all the necessary components.
 *
 * @return $result
 *   true or false
 */
function image_enhanced_scaling_check() {
  if (!function_exists('_image_check_settings')) {
    drupal_set_message(t('The image module must be installed and enabled in order for Image enhanced scaling to work.'), 'error');
    return false;
  }
  if (!_image_check_settings()) return false;
  if (image_get_toolkit() != 'imagemagick') { // this also activates the toolkit
    drupal_set_message(t('The ImageMagick toolkit needs to be installed and enabled in order for Image enhanced scaling to work. See the <a href="!image_enhanced_scaling_help">Image enhanced scaling help section</a> for more info.', array('!image_enhanced_scaling_help' => url('admin/help/image_enhanced_scaling'))), 'error');
    return false;
  }
  return true;
}


/**
 * Get a file name for a derivative image.
 *
 * @param $filename
 *   A filename or a path to a derivative image.
 * @return $result
 *   A modified filename or path.
 */
function image_enhanced_scaling_new_image_name($filename) {
  // Check if source if a jpeg. If not, make sure destination is a jpeg.
  $source_suffix = strrchr($filename, '.');
  if (strtolower($source_suffix) != '.jpg') {
    $filename = substr($filename, 0, strlen($filename) - strlen($source_suffix)) . '.jpg';
  }
  return $filename;
}


/**
 * Resize an image using Imagemagick. Apply sharpening and color profile conversion.
 *
 * @param $source
 *   Full path to source file.
 * @param $dest
 *   Full path to destination file (which may or may not exist).
 * @param $width
 *   Pixel width of resized image.
 * @param $height
 *   Pixel height of resized image.
 * @param $sharp_amount
 *   Percentage of sharpness filter.
 * @param $sharp_radius
 *   Pixel radius of sharpness filter.
 * @param $profile
 *   Full path to color profile to apply.
 * @return $result
 *   The result of _image_imagemagick_convert()
 */
function image_enhanced_scaling_resize($source, $dest, $width, $height, $sharp_amount=90, $sharp_radius=0.9, $profile=false) {
  // Example: convert -resize 800x800\> -density 72 -unsharp 0.9x0.7+0.9+0.02 -profile /path/to/sRGB.icc -depth 8 /path/to/source.jpg /path/to/dest.jpg
  // The '>' prevents smaller images from being scaled up
  // More info: http://www.imagemagick.org/script/command-line-options.php
  $filter = ' -resize ' . $width . 'x' . $height . '\>';
  $filter .= ' -density 72';
  if ($sharp_amount) { 
    $sharp_amount = round((int)$sharp_amount / 100, 2);
    $filter .= ' -unsharp ' . $sharp_radius . 'x0.7+' . $sharp_amount . '+0.02';
  }
  if ($profile) $filter .= ' -profile ' . $profile;
  $filter .= ' -depth 8';
  return _image_enhanced_scaling_convert($source, $dest, $filter);
}

/**
 * Calls the convert executable with the specified filter.
 * This is a modified copy of _image_imagemagick_convert() which adds
 * the possibility to use slashes (/), backslashes (\) and underscores (_) in $filter
 */
function _image_enhanced_scaling_convert($source, $dest, $filter) {
  $convert_path = variable_get('image_imagemagick_convert', '/usr/bin/convert');
  if (!file_exists($convert_path)) {
    return false;
  }
  
  $filter = preg_replace("/[^A-Za-z0-9\.\-\+\040\/\\_]/", '', $filter);
  $source = _image_escape_shell($source);
  $dest = _image_escape_shell($dest);
  $err = _image_exec("$convert_path $filter $source $dest");
  if ($err) {
    return false;
  }
  if (!file_exists(trim($dest, "'"))) {
    return false;
  }
  
  return true;
}

