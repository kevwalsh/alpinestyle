<?php
// $Id: taxonomy_list.module,v 1.7 2006/11/13 08:34:43 boogiebug Exp $

/**
 * @file
 * List the category, specify in the URL
 */

/**
 * Implementation of hook_help().
 */
function taxonomy_list_help($section) {
  switch ($section) {
    case 'admin/help#taxonomy_list':
      $output = '<p>'. t('The taxonomy module is one of the most popular features because users often want to create categories to organize content by type. This module enable the page to display the list of items in each category.') .'</p>';
      return $output;

    case 'admin/modules#description':
      return t('Enables the list of content categories (A.K.A. the Taxonomy).');
  }
}

/**
 * Implementation of hook_perm().
 */
function taxonomy_list_perm() {
  return array('administer taxonomy_list');
}

/**
 * Implementation of hook_menu().
 */
function taxonomy_list_menu($may_cache) {
  $items = array();

  $items[] = array('path' => 'taxonomy/vocabulary',
    'title' => t(""),
    'callback' => 'taxonomy_list_show',
    'access' => user_access('access content'),
    'type' => MENU_CALLBACK);

  if ($may_cache) {
    $vocabs = taxonomy_get_vocabularies();
    foreach ($vocabs as $v)
    {
      $items[] = array('path' => 'taxonomy/vocabulary/'. $v->vid,
        'title' => t($v->name),
        'callback' => 'taxonomy_list_show',
        'callback arguments' => array($v->vid),
        'access' => user_access('access content'),
        'type' => MENU_CALLBACK);
    }
  }

  return $items;
}

/**
 * Implementation of hook_settings().
 */
function taxonomy_list_settings() {

  $form['info']['taxonomy_list_info'] = array(
    '#type'  => 'item',
    '#value' => t('<p>The taxonomy_list module enable the URL to browse into each vocabulary, using the format of :</p>')
             .  t('<code>"taxonomy/vocabulary/&lt;vid&gt;"</code>')
             .  t('<p>Together with the taxonomy_image.module, the list can be displayed with a image icon.</p>')
  );

  $form['settings'] = array(
    '#type' => 'fieldset',
    '#title' => t('Settings'),
    '#collapsible' => FALSE,
  );

  $form['settings']['taxonomy_list_list_mode'] = array(
    '#type' => 'select',
    '#title' => t('List Mode'),
    '#default_value' => variable_get('taxonomy_list_list_mode', 0),
    '#options' => array(
        '0' => t('Hierarchical'),
        '1' => t('Flat'),
      ),
    '#description' => t('How the taxonomy_list.module display the list of terms?')
                    . t('<ul>')
                    . t('<li>Hierarchical - Subcategories as a table inside their parent\'s cell</li>')
                    . t('<li>Flat - All terms are listed as the same level in the grid</li>')
                    . t('</ul'),
  ); 

  $form['settings']['taxonomy_list_cell_per_row'] = array(
    '#type' => 'textfield',
    '#title' => t('Terms per row'),
    '#default_value' => variable_get('taxonomy_list_cell_per_row', 2),
    '#description' => t('Number of terms to be displayed on the same row.'),
  ); 

  $form['settings']['taxonomy_list_txt_blk_attr'] = array(
    '#type' => 'textfield',
    '#title' => t('Text attributes'),
    '#default_value' => variable_get('taxonomy_list_txt_blk_attr', ''),
    '#description' => t('Identify the HTML attributes for the &lt;div&gt; block of the term name and description text.'),
  ); 

  if ( module_exists('taxonomy_image') ) {
    $form['settings']['taxonomy_list_show_image'] = array(
      '#type' => 'checkbox',
      '#title' => t('Show taxonomy image?'),
      '#default_value' => variable_get('taxonomy_list_show_image', 1),
      '#description' => t('Display the taxonomy image? (taxonomy_image.module is required) If disabled, following configurations will be ignored'),
    ); 

    $form['settings']['taxonomy_list_img_blk_attr'] = array(
      '#type' => 'textfield',
      '#title' => t('Image attributes'),
      '#default_value' => variable_get('taxonomy_list_img_blk_attr', 'align="left"'),
      '#description' => t('Identify the HTML attributes for the &lt;div&gt; block of the image.'),
    ); 
  }

  return $form;
}

/**
 * Show the category list
 */
function taxonomy_list_show($str_vids) {

  if ( preg_match('/^([0-9]+[+ ])+[0-9]+$/', $str_vids) ) {
    // The '+' character in a query string may be parsed as ' '.
    $vids = preg_split('/[+ ]/', $str_vids);
  }
  else if (preg_match('/^[0-9]+$/', $str_vids) ) {
    $vids = array($str_vids);
  }

  if ( count($vids) <= 0 ) {
    drupal_not_found();
  }

  $module_ok = module_exists('taxonomy_image');

  $show_image    = variable_get('taxonomy_list_show_image', 1);
  $cells_per_row = variable_get('taxonomy_list_cell_per_row', 2);
  $img_blk_attr  = variable_get('taxonomy_list_img_blk_attr', '');
  $txt_blk_attr  = variable_get('taxonomy_list_txt_blk_attr', '');

  $cell_width = round(100/$cells_per_row);

//  $active_menu = menu_get_active_item();
//  $this_menu   = menu_get_item($active_menu);

  $vocab_titles = '';
  $total_terms  = 0;

  $output = '<div class="taxonomy-list">';
//  $output .= '<div class="description">'. t($this_menu['description']) .'</div>';

  foreach ($vids as $vid) {
    $vocab = taxonomy_get_vocabulary($vid);
    $terms = taxonomy_get_tree($vid); // product_category

    $c = count($terms);
    $total_terms += $c;

    if ( $c <= 0 ) {
      // this vocab has no term, skip
      continue;
    }

    $vocab_titles = strlen($vocab_titles) == 0 ? $vocab->name : $vocab_titles .' & '. $vocab->name;

//    $output .= '<h3 class="title">'. t($vocab->name) .'</h3>';
    $output .= '<div class="description">';
    $output .= t($vocab->description);
    $output .= '</div>';

    $output .= _taxonomy_list_get_table($terms, $vid, $cells_per_row, $cell_width, $module_ok, $show_image, $img_blk_attr, $txt_blk_attr);
  }

  $output .= '</div>'; // class="taxonomy-list"

  if ( $total_terms == 0 ) {
    drupal_not_found();
  }

  $bc = array(
    l( t('Home'), ''),
  );

  drupal_set_breadcrumb($bc);
//  drupal_set_title(t($thismenu['title']));
  drupal_set_title(t($vocab_titles));
  return $output;
}
/**
 * Pad the remaining cells in the table
 */
function _taxonomy_list_pad_row(&$cells, &$rows, $cells_per_row) {
  $cellscount = count($cells);

  if ( $cellscount > 0 ) {
    // padding
    for ( $j = $cellscount; $j < $cells_per_row; $j++ ) {
      $cells[] = '&nbsp;';
    }
    $rows[] = array('data' => $cells);
    $cells  = array();
  }
}
/**
 * Generate cascaded tables with terms and sub terms inside
 */
function _taxonomy_list_get_table($terms, $vid, $cells_per_row, $cell_width, $module_ok, $show_image, $img_blk_attr, $txt_blk_attr) {

  // list of terms those already rendered
  static $done = array();

  $cells = array();
  $rows  = array();

  foreach ( $terms as $term ) {

    if ( in_array($term->tid, $done) ) {
      continue;
    }

    $done[] = $term->tid;

    $children     = taxonomy_get_children($term->tid, $vid);
    $has_children = ( count($children) > 0 )  && ( variable_get('taxonomy_list_list_mode', 0) == 0 );

    if ( $has_children ) {
      // pad the row, and then the parent term will start
      // at the begining of the next row
      _taxonomy_list_pad_row($cells, $rows, $cells_per_row);
    }

    $cell  = $has_children ? '<div class="taxonomy-list-casecade"><div class="taxonomy-list-parent">' : '';
    $cell .= '<div class="taxonomy-list-item">';

    if ( $module_ok && $show_image ) {
      $cell .= '<div class="taxonomy-list-img-blk" '. ($img_blk_attr ? $img_blk_attr : '') .'>'
            .  '<a href="'. base_path() .'taxonomy/term/'. $term->tid .'">'. taxonomy_image_display($term->tid, '') .'</a>'
            .  '</div>';
    }

    $cell .= '<div class="taxonomy-list-txt-blk" '. ($txt_blk_attr ? $txt_blk_attr : '') .'>'
          .  '<div class="title"><a href="'. base_path() .'taxonomy/term/'. $term->tid .'">'. t($term->name)  .'</a></div>'
          .  '<div class="description">'. t($term->description) .'</div>'
          .  '</div>';

    $cell .= '</div>';  // class="taxonomy-list-item"

    if ( $has_children ) {
      $cell .= '</div>'; // class="taxonomy-list-parent"
      $cell .= '<div class="taxonomy-list-children">';
      $cell .= _taxonomy_list_get_table($children, $vid, $cells_per_row, $cell_width, $module_ok, $show_image, $img_blk_attr, $txt_blk_attr);
      $cell .= '</div>'; // class="taxonomy-list-children"
      $cell .= '</div>'; // class="taxonomy-list-casecade"
    }

    if ( $has_children ) {
      // span the cell to cover the whole row, and then the
      // next term will start at the begining of the next row
      $cells[] = array('data' => $cell, 'width' => '100%', 'colspan' => $cells_per_row);
      $rows[] = array('data' => $cells);
      $cells = array();
    }
    else {
      $cells[] = array('data' => $cell, 'width' => $cell_width .'%');

      // add cell into the row, advance row if it reach the end of row
      if ( count($cells) % $cells_per_row == 0 ) {
        $rows[] = array('data' => $cells);
        $cells = array();
      }
    }
  }

  // ensure that the table will be in good shape
  // by padding the last row of the table
  _taxonomy_list_pad_row($cells, $rows, $cells_per_row);

  return theme('table', array(), $rows, array('width'=>"100%", "border" => "0"));
}
